#! /usr/bin/python

import sys
import subprocess as sp
import pwd
import os
import click


def fileCreateWrite(file_name, strings_to_write, mode = "w+"):
    f = open(file_name, mode)
    if mode == "w+":
        for i in strings_to_write:
            f.write("%s\n" % (i))
        f.close()
    elif mode == "a":
        f.write("%s\n" % (strings_to_write))
        f.close()

def crontab_runner(command, cleanup, hits, consensus, notify, nsites):
    """Sets up and runs crontab for labeller's daemons."""
    USER = pwd.getpwuid(os.getuid()).pw_name
    HOME = os.environ['HOME']
    base = "labeller"

    if HOME not in {'/home/mapper', '/home/sandbox'}: 
        projectRoot = os.getcwd()  # allows testing locally
    else:
        projectRoot = '%s/labeller' % (HOME)

    hstrngs = [
      "# Any email generated by this crontab script will be processed to create",
      "# an Internal Alert GitHub issue.",
      "# This crontab script can run from the mapper or sandbox user account", 
      "# on any labeller server.",
      "SHELL=/bin/bash", 
      "", 
      "# Min Hour(0-23) Day Month DOW Command"
    ]
    strngs = [
      "0,5,10,15,20,25,30,35,40,45,50,55 * * * * ", 
       "/home/%s/%s/common/daemonNanny.sh " % (USER, base),
      "/home/%s/%s/common/" % (USER, base),
      " >>/home/%s/%s/log/daemonNanny.log" % (USER, base),
      "(source %s/%s/common/bashrc_mapper.sh;" % (HOME, base)
    ]
    daemons = [
      "cleanup_absent_worker.py", "create_hit_daemon.py", 
      "generate_consensus_daemon.py", "worker_notification_daemon.py",
      "select_n_sites.py"
    ]

    # Write fresh crontabFile
    if command == "crontab":
        crontab_file = "%s/common/crontabFile.labeller" % projectRoot
        fileCreateWrite(crontab_file, hstrngs)

    # First setup cleanup_absent_worker.py
    if cleanup == "T":
        cron_string = strngs[0] + strngs[1] + strngs[2] + daemons[0] + strngs[3]
        if command == "crontab":
            fileCreateWrite(crontab_file, cron_string, "a")

    # create_hit_daemon
    if hits == "T":
        cron_string = strngs[0] + strngs[1] + strngs[2] + daemons[1] + strngs[3]
        if command == "crontab":
            fileCreateWrite(crontab_file, cron_string, "a")

    # generate_consensus_daemon    
    if consensus == "T":
        cron_string = strngs[0] + strngs[4] +  strngs[1] + strngs[2] + daemons[2]
        cron_string = cron_string + ")" + strngs[3]
        if command == "crontab":
            fileCreateWrite(crontab_file, cron_string, "a")

    # worker_notification_daemon.py
    if notify == "T":
        cron_string = strngs[0] + strngs[1] + strngs[2] + daemons[3] + strngs[3]
        if command == "crontab":
            fileCreateWrite(crontab_file, cron_string, "a")

    # select_n_sites.py
    if nsites == "T":
        cron_string = strngs[0] + strngs[1] + strngs[2] + daemons[4] + strngs[3]
        if command == "crontab":
            fileCreateWrite(crontab_file, cron_string, "a")
        
    # Run cron
    if command == "crontab":
        print sp.Popen(["crontab", crontab_file], stdout=sp.PIPE, 
                       stderr=sp.STDOUT).communicate()[0]
        print sp.Popen(["crontab", "-l"], stdout=sp.PIPE, 
                       stderr=sp.STDOUT).communicate()[0]
    # or just check the commands you specified
    elif command == "echo":
        print cron_string


@click.command()
@click.option("--command", default="crontab", 
              help="Defaults to crontab, but echo can be run to test")
@click.option("--cleanup", default="T", 
              help="Defaults to T, but can be F")
@click.option("--hits", default="F",  
              help="Defaults to F for basic maintenance. T for production")
@click.option("--consensus", default="F", 
              help="Enter T to generate consensus labels or F if not")
@click.option("--notify", default="F", 
              help="Enter T to have slack notifier run, F if not")
@click.option("--nsites", default="F", 
              help="Enter T if you want N sites served up, F if not")
def main(command, cleanup, hits, consensus, notify, nsites):
    crontab_runner(command, cleanup, hits, consensus, notify, nsites)

if __name__ == '__main__':
    main()
